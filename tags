!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARP_CACHE_TIME	netutil.c	/^#define ARP_CACHE_TIME	/;"	d	file:
ARP_CACHE_TIME_HOUR	netutil.c	/^#define ARP_CACHE_TIME_HOUR	/;"	d	file:
ARP_CACHE_TIME_MIN	netutil.c	/^#define ARP_CACHE_TIME_MIN	/;"	d	file:
ARP_CACHE_TIME_SEC	netutil.c	/^#define ARP_CACHE_TIME_SEC	/;"	d	file:
BASE_H_INCLUDED	base.h	/^#define BASE_H_INCLUDED$/;"	d
BUF_SIZE	net.c	/^#define BUF_SIZE	/;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -g$/;"	m
DAEMON_NAME	base.h	/^#define DAEMON_NAME	/;"	d
DEBUG_DISABLE	log.c	/^#define DEBUG_DISABLE	/;"	d	file:
DEBUG_ENABLE	log.c	/^#define DEBUG_ENABLE	/;"	d	file:
IFTAP_H_INCLUDED	iftap.h	/^#define IFTAP_H_INCLUDED$/;"	d
IF_NAME_LEN	base.h	/^#define IF_NAME_LEN	/;"	d
LDLIBS	Makefile	/^LDLIBS=-lpthread$/;"	m
LOG_H_INCLUDED	log.h	/^#define LOG_H_INCLUDED$/;"	d
LOG_LINELEN	log.c	/^#define LOG_LINELEN	/;"	d	file:
MAC_LEN	base.h	/^#define MAC_LEN	/;"	d
MAC_LEN_BITS	base.h	/^#define MAC_LEN_BITS	/;"	d
MAC_SPACE	netutil.c	/^#define MAC_SPACE /;"	d	file:
MAX_ONE_POOL	mpool.h	/^#define MAX_ONE_POOL /;"	d
MCAST_DEFAULT_ADDR	gen.c	/^#define MCAST_DEFAULT_ADDR /;"	d	file:
MCAST_DEFAULT_ADDR	gen2.c	/^#define MCAST_DEFAULT_ADDR /;"	d	file:
MCAST_DEFAULT_ADDR	net.c	/^#define MCAST_DEFAULT_ADDR	/;"	d	file:
MPOOL_ALIGN_SIZE	mpool.c	/^#define MPOOL_ALIGN_SIZE	/;"	d	file:
MPOOL_FREE	mpool.h	/^#define MPOOL_FREE(/;"	d
MPOOL_H_INCLUDED	mpool.h	/^#define MPOOL_H_INCLUDED$/;"	d
MPOOL_MALLOC	mpool.h	/^#define MPOOL_MALLOC(/;"	d
MPOOL_POOL_SIZE	mpool.c	/^#define MPOOL_POOL_SIZE /;"	d	file:
NETUTIL_H_INCLUDED	netutil.h	/^#define NETUTIL_H_INCLUDED$/;"	d
NET_H_INCLUDED	net.h	/^#define NET_H_INCLUDED$/;"	d
OBJS	Makefile	/^OBJS=main.o netutil.o log.o iftap.o table.o net.o vxlan.o #test.o mpool.o $/;"	m
SRCS	Makefile	/^SRCS=${OBJS:%.o=%.c}$/;"	m
SYSLOG_DISABLE	log.c	/^#define SYSLOG_DISABLE	/;"	d	file:
SYSLOG_ENABLE	log.c	/^#define SYSLOG_ENABLE	/;"	d	file:
TABLE_H_INCLUDED	table.h	/^#define TABLE_H_INCLUDED$/;"	d
TABLE_MIN	table.c	/^#define TABLE_MIN	/;"	d	file:
TABLE_SIZE	table.h	/^#define TABLE_SIZE /;"	d
TAP_BASE_NAME	base.h	/^#define TAP_BASE_NAME	/;"	d
TARGET	Makefile	/^TARGET=vxland$/;"	m
TEST_H_INCLUDED	test.h	/^#define TEST_H_INCLUDED$/;"	d
To32	vxlan.h	/^#define To32(/;"	d
To32ex	vxlan.h	/^#define To32ex(/;"	d
VNI_BIT	vxlan.h	/^#define VNI_BIT	/;"	d
VNI_BYTE	vxlan.h	/^#define VNI_BYTE	/;"	d
VXI_MAX	vxlan.c	/^#define VXI_MAX /;"	d	file:
VXLAN_FLAG_MASK	net.c	/^#define VXLAN_FLAG_MASK	/;"	d	file:
VXLAN_H_INCLUDED	vxlan.h	/^#define VXLAN_H_INCLUDED$/;"	d
VXLAN_PORT	gen.c	/^#define VXLAN_PORT	/;"	d	file:
VXLAN_PORT	gen2.c	/^#define VXLAN_PORT	/;"	d	file:
VXLAN_PORT	net.c	/^#define VXLAN_PORT	/;"	d	file:
_debug_mode	log.c	/^static int _debug_mode = DEBUG_DISABLE;$/;"	v	file:
_device_	base.h	/^typedef struct _device_ {$/;"	s
_h_name	log.c	/^static char _h_name[HOST_NAME_MAX];		\/\/ Host Name$/;"	v	file:
_ilt_arg_	main.c	/^typedef struct _ilt_arg_ {$/;"	s	file:
_list_	table.h	/^typedef struct _list_$/;"	s
_mac2ip4_table_	table.h	/^typedef struct _mac2ip4_table_$/;"	s
_mpool_pool_t_	mpool.h	/^typedef struct _mpool_pool_t_ {$/;"	s
_pid	log.c	/^static int _pid;						\/\/ Process ID$/;"	v	file:
_print_log	log.c	/^static void _print_log(int level, const char *fmt, ...) {$/;"	f	file:
_print_log_v	log.c	/^static void _print_log_v(int level, const char *fmt, va_list ap) {$/;"	f	file:
_syslog_mode	log.c	/^static int _syslog_mode = SYSLOG_ENABLE;$/;"	v	file:
_vxlan_h_	net.h	/^typedef struct _vxlan_h_ {$/;"	s
_vxlan_instance_	vxlan.h	/^typedef struct _vxlan_instance_ {$/;"	s
add_data	table.c	/^void add_data(list **table, uint8_t *hw_addr, uint32_t vtep_addr)$/;"	f
add_vxi	vxlan.c	/^vxi *add_vxi(uint8_t *vni, char *addr) {$/;"	f
addr	main.c	/^	char *addr;$/;"	m	struct:_ilt_arg_	file:
begin	mpool.h	/^	void			*begin; 		\/\/ Data for internal conduct$/;"	m	struct:mpool_t
buf2	test.c	/^char buf2[32] = {'t', 'e', 's', 't', '\\0'};$/;"	v
cmp_mac	netutil.c	/^int cmp_mac(uint8_t hwaddr1[MAC_LEN], uint8_t hwaddr2[MAC_LEN]) {$/;"	f
create_vxi	vxlan.c	/^void create_vxi(uint8_t *vni, char *addr, pthread_t th) {$/;"	f
create_vxlan_if	vxlan.c	/^static device create_vxlan_if(uint8_t *vni) {$/;"	f	file:
data	table.h	/^	mac_tbl *data;$/;"	m	struct:_list_
del_data	table.c	/^void del_data(list **table, unsigned int key)$/;"	f
del_vxi	vxlan.c	/^void del_vxi(uint8_t *vni) {$/;"	f
destroy_vxi	vxlan.c	/^void destroy_vxi(uint8_t *vni) {$/;"	f
destroy_vxlan	vxlan.c	/^void destroy_vxlan(void) {$/;"	f
device	base.h	/^} device;$/;"	t	typeref:struct:_device_
disable_debug	log.c	/^void disable_debug(void) {$/;"	f
disable_syslog	log.c	/^void disable_syslog(void) {$/;"	f
enable_debug	log.c	/^void enable_debug(void) {$/;"	f
enable_syslog	log.c	/^void enable_syslog(void) {$/;"	f
eth_ntoa	netutil.c	/^char *eth_ntoa(uint8_t *hwaddr, char *buf, size_t size) {$/;"	f
find_data	table.c	/^mac_tbl *find_data(list **table, uint8_t *eth)$/;"	f
find_list	table.c	/^static list *find_list(list **table, uint8_t *eth_addr)$/;"	f	file:
flag	net.h	/^	uint8_t flag;$/;"	m	struct:_vxlan_h_
get_addr	netutil.c	/^uint32_t get_addr(char *if_name) {$/;"	f
get_mac	netutil.c	/^uint8_t *get_mac(int sock, char *name, uint8_t *hwaddr) {$/;"	f
get_ran_mac	netutil.c	/^void get_ran_mac( uint8_t hwaddr[MAC_LEN] ) {$/;"	f
get_usoc	net.c	/^int get_usoc(void) {$/;"	f
head	mpool.h	/^	mpool_pool_t	*head;			\/\/ Memory pool head$/;"	m	struct:mpool_t
hw_addr	table.h	/^	uint8_t hw_addr[MAC_LEN];$/;"	m	struct:_mac2ip4_table_
hwaddr	base.h	/^	uint8_t hwaddr[MAC_LEN];$/;"	m	struct:_device_
ilt_arg	main.c	/^} ilt_arg;$/;"	t	typeref:struct:_ilt_arg_	file:
init_log	log.c	/^void init_log(void) {$/;"	f
init_raw_sock	net.c	/^int init_raw_sock(char *dev) {$/;"	f
init_table	table.c	/^list **init_table(unsigned int size) \/\/ hash table size$/;"	f
init_udp_sock	net.c	/^int init_udp_sock(unsigned short port) {$/;"	f
init_vxlan	vxlan.c	/^vxi ****init_vxlan(void) {$/;"	f
inner_loop	net.c	/^int inner_loop(vxi *v) {$/;"	f
inner_loop_thread	main.c	/^void *inner_loop_thread(void *args) {$/;"	f
join_mcast_group	net.c	/^int join_mcast_group(int sock, unsigned short port, char *mcast_addr, char *if_name) {$/;"	f
list	table.h	/^} list;$/;"	t	typeref:struct:_list_
log_cexit	log.c	/^void log_cexit(const char *fmt, ...) {$/;"	f
log_crit	log.c	/^void log_crit(const char *fmt, ...) {$/;"	f
log_debug	log.c	/^void log_debug(const char *fmt, ...) {$/;"	f
log_err	log.c	/^void log_err(const char *fmt, ...) {$/;"	f
log_iexit	log.c	/^void log_iexit(const char *fmt, ...) {$/;"	f
log_info	log.c	/^void log_info(const char *fmt, ...) {$/;"	f
log_pcexit	log.c	/^void log_pcexit(const char *str) {$/;"	f
log_pcrit	log.c	/^void log_pcrit(const char *str) {$/;"	f
log_perr	log.c	/^void log_perr(const char *str) {$/;"	f
log_stderr	log.c	/^void log_stderr(const char *fmt, ...) {$/;"	f
log_warn	log.c	/^void log_warn(const char *fmt, ...) {$/;"	f
mac_tbl	table.h	/^} mac_tbl;$/;"	t	typeref:struct:_mac2ip4_table_
main	gen.c	/^int main(int argc, char *argv[])$/;"	f
main	gen2.c	/^int main(int argc, char *argv[])$/;"	f
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
make_arp_packet	gen.c	/^int make_arp_packet(char *buf) {$/;"	f
make_arp_packet	gen2.c	/^int make_arp_packet(char *buf) {$/;"	f
make_l2_dran_packet	gen.c	/^int make_l2_dran_packet(char *buf) {$/;"	f
make_l2_dran_packet	gen2.c	/^int make_l2_dran_packet(char *buf)$/;"	f
make_l2_packet	gen.c	/^int make_l2_packet(char *buf) {$/;"	f
make_l2_packet	gen2.c	/^int make_l2_packet(char *buf) {$/;"	f
make_vxlan_header	gen.c	/^int make_vxlan_header(char *buf) {$/;"	f
make_vxlan_header	gen2.c	/^int make_vxlan_header(char *buf)$/;"	f
mcast_addr	vxlan.h	/^	uint32_t mcast_addr;$/;"	m	struct:_vxlan_instance_
mp_align	mpool.c	/^static inline size_t mp_align(size_t size) {$/;"	f	file:
mp_alloc	mpool.c	/^void *mp_alloc(size_t size, mpool_t *pool) {$/;"	f
mp_create	mpool.c	/^mpool_t *mp_create(size_t size) {$/;"	f
mp_decide_size	mpool.c	/^static inline size_t mp_decide_size(size_t size) {$/;"	f	file:
mp_destroy	mpool.c	/^void mp_destroy(mpool_t *pool)$/;"	f
mp_extend	mpool.c	/^static inline void mp_extend(mpool_pool_t *p, size_t size, mpool_t *pool) {$/;"	f	file:
mpool	mpool.h	/^	mpool_pool_t	*mpool;			\/\/ Memory pool$/;"	m	struct:mpool_t
mpool_pool_t	mpool.h	/^} mpool_pool_t;$/;"	t	typeref:struct:_mpool_pool_t_
mpool_t	mpool.h	/^typedef struct mpool_t {$/;"	s
mpool_t	mpool.h	/^} mpool_t;$/;"	t	typeref:struct:mpool_t
msize	mpool.h	/^	size_t			msize;			\/\/ Max pool size$/;"	m	struct:mpool_t
mtos	netutil.c	/^void mtos(char *str, uint8_t hwaddr[MAC_LEN]) {$/;"	f
name	base.h	/^	char name[IF_NAME_LEN];$/;"	m	struct:_device_
next	mpool.h	/^	struct _mpool_pool_t_	*next;$/;"	m	struct:_mpool_pool_t_	typeref:struct:_mpool_pool_t_::_mpool_pool_t_
next	table.h	/^	struct _list_ *next;$/;"	m	struct:_list_	typeref:struct:_list_::_list_
outer_loop	net.c	/^int outer_loop(void) {$/;"	f
outer_loop_thread	main.c	/^void *outer_loop_thread(void *args) {$/;"	f
pool	mpool.h	/^	void					*pool;	\/\/ Real memory space$/;"	m	struct:_mpool_pool_t_
pre	table.h	/^	struct _list_ *pre;$/;"	m	struct:_list_	typeref:struct:_list_::_list_
print_eth_h	netutil.c	/^void print_eth_h(struct ether_header *eh, FILE *fp) {$/;"	f
print_vxl_h	net.c	/^void print_vxl_h(vxlan_h *vh, FILE *fp) {$/;"	f
rsv1	net.h	/^	uint8_t rsv1[3];$/;"	m	struct:_vxlan_h_
rsv2	net.h	/^	uint8_t rsv2;$/;"	m	struct:_vxlan_h_
sendRaw	gen.c	/^void sendRaw(void) {$/;"	f
sendRaw	gen2.c	/^void sendRaw(void)$/;"	f
sendUdp	gen.c	/^void sendUdp(void) {$/;"	f
sendUdp	gen2.c	/^void sendUdp(void)$/;"	f
show_table	table.c	/^void show_table(list **table)$/;"	f
show_vxi	vxlan.c	/^void show_vxi(void) {$/;"	f
sock	base.h	/^	int sock;$/;"	m	struct:_device_
table	vxlan.h	/^	list **table;$/;"	m	struct:_vxlan_instance_
table_size	table.c	/^static unsigned int table_size;$/;"	v	file:
tap	vxlan.h	/^	device tap;$/;"	m	struct:_vxlan_instance_
tap_alloc	iftap.c	/^int tap_alloc(char *dev) {$/;"	f
tap_up	iftap.c	/^int tap_up(char *dev) {$/;"	f
test	test.c	/^void test(void) {$/;"	f
test_log	test.c	/^void test_log(void)$/;"	f
test_net	test.c	/^void test_net(void)$/;"	f
test_table	test.c	/^void test_table(void)$/;"	f
test_vxlan	test.c	/^void test_vxlan(void)$/;"	f
test_vxlan_table	test.c	/^void test_vxlan_table(void)$/;"	f
th	vxlan.h	/^	pthread_t th;$/;"	m	struct:_vxlan_instance_
time	table.h	/^	time_t time;$/;"	m	struct:_mac2ip4_table_
to_head	table.c	/^static void to_head(list **root, list *lp)$/;"	f	file:
usize	mpool.h	/^	size_t			usize;			\/\/ Used pool size$/;"	m	struct:mpool_t
usoc	net.c	/^static int usoc = -1;$/;"	v	file:
usoc	vxlan.h	/^	int usoc;$/;"	m	struct:_vxlan_instance_
vni	main.c	/^	uint8_t *vni;$/;"	m	struct:_ilt_arg_	file:
vni	net.h	/^	uint8_t vni[VNI_BYTE];$/;"	m	struct:_vxlan_h_
vni	vxlan.h	/^	uint8_t vni[VNI_BYTE];$/;"	m	struct:_vxlan_instance_
vtep_addr	table.h	/^	uint32_t vtep_addr;$/;"	m	struct:_mac2ip4_table_
vxi	vxlan.h	/^} vxi;$/;"	t	typeref:struct:_vxlan_instance_
vxlan	vxlan.c	/^vxi ****vxlan;$/;"	v
vxlan_h	net.h	/^} vxlan_h;$/;"	t	typeref:struct:_vxlan_h_
